name: Deploy to Supabase

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permite execu√ß√£o manual

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: üîç Verify secrets
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "Checking if secrets are configured..."
          if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then
            echo "‚ùå SUPABASE_ACCESS_TOKEN not configured"
            echo "Please add SUPABASE_ACCESS_TOKEN to repository secrets"
            echo "Go to: Settings > Secrets and variables > Actions > New repository secret"
            exit 1
          fi
          if [ -z "$SUPABASE_PROJECT_ID" ]; then
            echo "‚ùå SUPABASE_PROJECT_ID not configured"
            echo "Please add SUPABASE_PROJECT_ID to repository secrets"
            echo "Go to: Settings > Secrets and variables > Actions > New repository secret"
            exit 1
          fi
          echo "‚úÖ All secrets are configured"
          echo "Project ID: ${SUPABASE_PROJECT_ID:0:8}..."

      - name: üîç Validate function structure
        run: |
          echo "Validating Supabase functions..."
          
          if [ ! -d "supabase/functions" ]; then
            echo "‚ùå supabase/functions directory not found"
            echo "Please create the directory structure:"
            echo "  supabase/functions/gemini-proxy/index.ts"
            exit 1
          fi
          
          if [ ! -f "supabase/functions/gemini-proxy/index.ts" ]; then
            echo "‚ùå gemini-proxy function not found"
            echo "Please create: supabase/functions/gemini-proxy/index.ts"
            exit 1
          fi
          
          echo "‚úÖ Function structure is valid"
          echo "Found functions:"
          find supabase/functions -name "*.ts" -o -name "*.js" | head -10

      - name: üöÄ Deploy functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "Starting deployment to project: $SUPABASE_PROJECT_ID"
          echo "Deploying functions..."
          
          # Deploy all functions
          supabase functions deploy --project-ref "$SUPABASE_PROJECT_ID" --no-verify-jwt
          
          echo "‚úÖ Deployment completed successfully!"

      - name: ‚úÖ Deployment summary
        env:
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "üéâ Deployment completed successfully!"
          echo ""
          echo "üìã Summary:"
          echo "  Project ID: $SUPABASE_PROJECT_ID"
          echo "  Functions deployed: gemini-proxy"
          echo ""
          echo "üåê Your function is available at:"
          echo "  https://$SUPABASE_PROJECT_ID.supabase.co/functions/v1/gemini-proxy"
          echo ""
          echo "üìù Next steps:"
          echo "  1. Configure GEMINI_API_KEY in Supabase Environment Variables"
          echo "  2. Update your frontend to use the new function URL"
          echo "  3. Test the function with a POST request"
          echo ""
          echo "üîó Monitor logs at:"
          echo "  https://supabase.com/dashboard/project/$SUPABASE_PROJECT_ID/functions"